#include <stdio.h>
#include <stdlib.h>

#define MAX 3

typedef struct BTreeNode {
    int keys[MAX];
    struct BTreeNode* children[MAX + 1];
    int n;
    int leaf;
} BTreeNode;

typedef struct BTree {
    BTreeNode* root;
} BTree;

BTreeNode* createNode(int leaf) {
    BTreeNode* newNode = (BTreeNode*)malloc(sizeof(BTreeNode));
    newNode->leaf = leaf;
    newNode->n = 0;
    for (int i = 0; i <= MAX; i++)
        newNode->children[i] = NULL;
    return newNode;
}

void splitChild(BTreeNode* parent, int i, BTreeNode* fullChild) {
    BTreeNode* newChild = createNode(fullChild->leaf);
    newChild->n = MAX / 2;

    // Move last (MAX / 2) keys of fullChild to newChild
    for (int j = 0; j < MAX / 2; j++)
        newChild->keys[j] = fullChild->keys[j + MAX / 2 + 1];

    if (!fullChild->leaf) {
        for (int j = 0; j <= MAX / 2; j++)
            newChild->children[j] = fullChild->children[j + MAX / 2 + 1];
    }
    
    fullChild->n = MAX / 2;

    for (int j = parent->n; j >= i + 1; j--)
        parent->children[j + 1] = parent->children[j];

    parent->children[i + 1] = newChild;

    for (int j = parent->n - 1; j >= i; j--)
        parent->keys[j + 1] = parent->keys[j];

    parent->keys[i] = fullChild->keys[MAX / 2];
    parent->n++;
}

void insertNonFull(BTreeNode* node, int key) {
    int i = node->n - 1;

    if (node->leaf) {
        while (i >= 0 && key < node->keys[i]) {
            node->keys[i + 1] = node->keys[i];
            i--;
        }
        node->keys[i + 1] = key;
        node->n++;
    } else {
        while (i >= 0 && key < node->keys[i])
            i--;
        i++;

        if (node->children[i]->n == MAX) {
            splitChild(node, i, node->children[i]);
            if (key > node->keys[i])
                i++;
        }
        insertNonFull(node->children[i], key);
    }
}

void insert(BTree* tree, int key) {
    BTreeNode* root = tree->root;

    if (root->n == MAX) {
        BTreeNode* newRoot = createNode(0);
        newRoot->children[0] = root;
        splitChild(newRoot, 0, root);
        insertNonFull(newRoot, key);
        tree->root = newRoot;
    } else {
        insertNonFull(root, key);
    }
}

void inorderTraversal(BTreeNode* node) {
    if (node == NULL) return;
    int i;
    for (i = 0; i < node->n; i++) {
        if (!node->leaf)
            inorderTraversal(node->children[i]);
        printf("%d ", node->keys[i]);
    }
    if (!node->leaf)
        inorderTraversal(node->children[i]);
}

void preorderTraversal(BTreeNode* node) {
    if (node == NULL) return;
    int i;
    for (i = 0; i < node->n; i++) {
        printf("%d ", node->keys[i]);
        if (!node->leaf)
            preorderTraversal(node->children[i]);
    }
    if (!node->leaf)
        preorderTraversal(node->children[i]);
}

void postorderTraversal(BTreeNode* node) {
    if (node == NULL) return;
    int i;
    for (i = 0; i <= node->n; i++) {
        if (!node->leaf)
            postorderTraversal(node->children[i]);
    }
    for (i = 0; i < node->n; i++) {
        printf("%d ", node->keys[i]);
    }
}

BTree* createBTree() {
    BTree* tree = (BTree*)malloc(sizeof(BTree));
    tree->root = createNode(1);
    return tree;
}

int main() {
    BTree* tree = createBTree();
    int choice, key;
    while (1) {
        printf("\n1. Insert key\n2. In-order traversal\n3. Pre-order traversal\n4. Post-order traversal\n5. Exit\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter key to insert: ");
                scanf("%d", &key);
                insert(tree, key);
                break;
            case 2:
                printf("In-order Traversal: ");
                inorderTraversal(tree->root);
                printf("\n");
                break;
            case 3:
                printf("Pre-order Traversal: ");
                preorderTraversal(tree->root);
                printf("\n");
                break;
            case 4:
                printf("Post-order Traversal: ");
                postorderTraversal(tree->root);
                printf("\n");
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}
