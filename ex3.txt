#include <stdio.h>
#include <stdlib.h>

int main() {
    int r1, c1, r2, c2;
    
    printf("Enter rows and columns for first matrix: ");
    scanf("%d %d", &r1, &c1);
    
    printf("Enter rows and columns for second matrix: ");
    scanf("%d %d", &r2, &c2);
    
    if (c1 != r2) {
        printf("Matrix Multiplication is not possible\n");
        return 0;
    }
    
    int **matrix1 = (int **)malloc(r1 * sizeof(int *));//dynamically allocates memory
    for (int i = 0; i < r1; i++) {
        matrix1[i] = (int *)malloc(c1 * sizeof(int));
    }
    
    int **matrix2 = (int **)malloc(r2 * sizeof(int *));
    for (int i = 0; i < r2; i++) {
        matrix2[i] = (int *)malloc(c2 * sizeof(int));
    }
    
    int **result = (int **)malloc(r1 * sizeof(int *));
    for (int i = 0; i < r1; i++) {
        result[i] = (int *)malloc(c2 * sizeof(int));
    }
    
    printf("Enter elements of first matrix (%d x %d):\n", r1, c1);
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c1; j++) {
            scanf("%d", &matrix1[i][j]);
        }
    }
    
    printf("Enter elements of second matrix (%d x %d):\n", r2, c2);
    for (int i = 0; i < r2; i++) {
        for (int j = 0; j < c2; j++) {
            scanf("%d", &matrix2[i][j]);
        }
    }
    
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < c1; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
    
    printf("Resultant matrix:\n");
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }
    
    // Free allocated memory
    for (int i = 0; i < r1; i++) {
        free(matrix1[i]);
    }
    free(matrix1);
    // To avoid memory leaks, the program frees the memory allocated for the matrices 
    for (int i = 0; i < r2; i++) {
        free(matrix2[i]);
    }
    free(matrix2);
    
    for (int i = 0; i < r1; i++) {
        free(result[i]);
    }
    free(result);
    
    return 0;
}

///////////////
ex 5 
#include <stdio.h>
#include <stdlib.h>

// Define a structure for the Patient node
typedef struct Patient {
    int patientID;
    struct Patient* next;
} Patient;

// Function to create a new patient node
Patient* createPatient(int id) {
    Patient* newPatient = (Patient*)malloc(sizeof(Patient));
    newPatient->patientID = id;
    newPatient->next = NULL;
    return newPatient;
}

// Function to insert a patient at the end of the list
void insertPatient(Patient** head, int id) {
    Patient* newPatient = createPatient(id);
    if (*head == NULL) {
        *head = newPatient;
    } else {
        Patient* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newPatient;
    }
    printf("Patient with ID %d added to the queue.\n", id);
}

// Function to delete the patient at the beginning of the list
void deletePatient(Patient** head) {
    if (*head == NULL) {
        printf("No patients in the queue.\n");
        return;
    }
    Patient* temp = *head;
    *head = (*head)->next;
    printf("Patient with ID %d has been seen by the doctor and removed from the queue.\n", temp->patientID);
    free(temp);
}

// Function to find a patient by their ID
void findPatient(Patient* head, int id) {
    Patient* temp = head;
    while (temp != NULL) {
        if (temp->patientID == id) {
            printf("Patient with ID %d found in the queue.\n", id);
            return;
        }
        temp = temp->next;
    }
    printf("Patient with ID %d not found in the queue.\n", id);
}

// Function to display the patient queue
void displayQueue(Patient* head) {
    if (head == NULL) {
        printf("The queue is empty.\n");
        return;
    }
    Patient* temp = head;
    printf("Current Queue: ");
    while (temp != NULL) {
        printf("%d -> ", temp->patientID);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function to test the queue operations
int main() {
    Patient* head = NULL; // Initialize the head of the list

    insertPatient(&head, 101);
    insertPatient(&head, 102);
    insertPatient(&head, 103);

    displayQueue(head);

    findPatient(head, 102);
    findPatient(head, 104);

    deletePatient(&head);
    deletePatient(&head);

    displayQueue(head);

    deletePatient(&head);
    deletePatient(&head);

    return 0;
}

///////
pseudo code for ex 5

Structure Patient:
    int patientID
    Patient* next
Function createPatient(id):
    Allocate memory for a new Patient node
    Set newPatient.patientID = id
    Set newPatient.next = NULL
    Return newPatient
Function insertPatient(head, id):
    newPatient = createPatient(id)
    
    If head is NULL:
        head = newPatient
    Else:
        temp = head
        While temp.next is not NULL:
            temp = temp.next
        End While
        temp.next = newPatient
    End If
    Print "Patient with ID", id, "added to the queue."
Function deletePatient(head):
    If head is NULL:
        Print "No patients in the queue."
        Return
    End If
    
    temp = head
    head = head.next
    Print "Patient with ID", temp.patientID, "has been seen by the doctor and removed from the queue."
    Free memory for temp
Function findPatient(head, id):
    temp = head
    While temp is not NULL:
        If temp.patientID == id:
            Print "Patient with ID", id, "found in the queue."
            Return
        End If
        temp = temp.next
    End While
    Print "Patient with ID", id, "not found in the queue."
Function displayQueue(head):
    If head is NULL:
        Print "The queue is empty."
        Return
    End If
    
    temp = head
    Print "Current Queue:"
    While temp is not NULL:
        Print temp.patientID, "->"
        temp = temp.next
    End While
    Print "NULL"
head = NULL  // Initialize the head of the list

insertPatient(head, 101)
insertPatient(head, 102)
insertPatient(head, 103)

displayQueue(head)

findPatient(head, 102)
findPatient(head, 104)

deletePatient(head)
deletePatient(head)

displayQueue(head)

deletePatient(head)
deletePatient(head)
