#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Reservation structure
typedef struct Reservation {
    int id;
    char date[20]; // Format: YYYY-MM-DD
    struct Reservation *prev;
    struct Reservation *next;
} Reservation;

Reservation *head = NULL;

// Function to add a reservation to the end of the list
void addReservation(int id, const char *date) {
    Reservation newReservation = (Reservation)malloc(sizeof(Reservation));
    newReservation->id = id;
    strcpy(newReservation->date, date);
    newReservation->next = NULL;
    newReservation->prev = NULL;

    if (head == NULL) {
        head = newReservation;
    } else {
        Reservation *temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newReservation;
        newReservation->prev = temp;
    }
}

// Function to remove a reservation by ID
void removeReservationByID(int id) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    Reservation *temp = head;

    while (temp != NULL && temp->id != id) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Reservation with ID %d not found.\n", id);
        return;
    }

    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    } else {
        head = temp->next; // Node is the head
    }

    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }

    free(temp);
    printf("Reservation with ID %d removed.\n", id);
}

// Helper function to swap two reservations
void swapReservations(Reservation *a, Reservation *b) {
    int tempID = a->id;
    char tempDate[20];
    strcpy(tempDate, a->date);

    a->id = b->id;
    strcpy(a->date, b->date);

    b->id = tempID;
    strcpy(b->date, tempDate);
}

// Function to sort reservations by date
void sortReservationsByDate() {
    if (head == NULL || head->next == NULL) {
        return;
    }

    int swapped;
    Reservation *ptr;
    Reservation *last = NULL;

    do {
        swapped = 0;
        ptr = head;

        while (ptr->next != last) {
            if (strcmp(ptr->date, ptr->next->date) > 0) {
                swapReservations(ptr, ptr->next);
                swapped = 1;
            }
            ptr = ptr->next;
        }
        last = ptr;
    } while (swapped);
}

// Function to find a reservation by ID
int findReservationByID(int id) {
    Reservation *temp = head;
    int position = 0;

    while (temp != NULL) {
        if (temp->id == id) {
            return position;
        }
        temp = temp->next;
        position++;
    }

    return -1; // Reservation not found
}

// Helper function to print all reservations
void printReservations() {
    Reservation *temp = head;
    while (temp != NULL) {
        printf("Reservation ID: %d, Date: %s\n", temp->id, temp->date);
        temp = temp->next;
    }
}

// Main function to test the functionality
int main() {
    addReservation(101, "2024-08-30");
    addReservation(102, "2024-09-01");
    addReservation(103, "2024-08-28");

    printf("Reservations before sorting:\n");
    printReservations();

    sortReservationsByDate();
    printf("\nReservations after sorting by date:\n");
    printReservations();

    int pos = findReservationByID(102);
    if (pos != -1) {
        printf("\nReservation with ID 102 found at position %d.\n", pos);
    } else {
        printf("\nReservation with ID 102 not found.\n");
    }

    removeReservationByID(102);
    printf("\nReservations after removing ID 102:\n");
    printReservations();

    return 0;
}
