#include <stdio.h>
#include <stdlib.h>

// Stack node structure using a linked list
typedef struct StackNode {
    int data;
    struct StackNode* next;
} StackNode;

// Function to create a new stack node
StackNode* newNode(int data) {
    StackNode* stackNode = (StackNode*)malloc(sizeof(StackNode));
    stackNode->data = data;
    stackNode->next = NULL;
    return stackNode;
}

// Function to check if the stack is empty
int isEmpty(StackNode* root) {
    return !root;
}

// Function to push an element onto the stack
void push(StackNode** root, int data) {
    StackNode* stackNode = newNode(data);
    stackNode->next = *root;
    *root = stackNode;
}

// Function to pop an element from the stack
int pop(StackNode** root) {
    if (isEmpty(*root)) {
        printf("Stack underflow\n");
        return -1;
    }
    StackNode* temp = *root;
    *root = (*root)->next;
    int popped = temp->data;
    free(temp);
    return popped;
}

// Function to reverse a stack
StackNode* reverseStack(StackNode* root) {
    StackNode* prev = NULL;
    StackNode* current = root;
    StackNode* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

// Function to add two numbers represented by two stacks
StackNode* addStacks(StackNode* s1, StackNode* s2) {
    StackNode* result = NULL;
    int carry = 0;

    while (!isEmpty(s1) || !isEmpty(s2)) {
        int sum = carry;
        if (!isEmpty(s1)) {
            sum += pop(&s1);
        }
        if (!isEmpty(s2)) {
            sum += pop(&s2);
        }
        push(&result, sum % 10);
        carry = sum / 10;
    }

    if (carry) {
        push(&result, carry);
    }

    // Reverse the result stack to maintain the correct order
    result = reverseStack(result);

    return result;
}

// Function to print the stack
void printStack(StackNode* root) {
    while (root) {
        printf("%d", root->data);
        root = root->next;
    }
    printf("\n");
}

int main() {
    StackNode* s1 = NULL;
    StackNode* s2 = NULL;

    // Example numbers: 342 + 465
    push(&s1, 3);
    push(&s1, 4);
    push(&s1, 2);

    push(&s2, 4);
    push(&s2, 6);
    push(&s2, 5);

    StackNode* result = addStacks(s1, s2);
    printf("Sum: ");
    printStack(result);

    return 0;
}
