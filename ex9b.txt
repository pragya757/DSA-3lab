#include <stdio.h>
#include <ctype.h>  // for isdigit(), isalpha() functions
#include <stdlib.h> // for exit() function
#include <string.h> // for strlen() function

#define MAX 100

char stack[MAX];
int top = -1;

// Function to push an element onto the stack
void push(char x) {
    if (top == MAX - 1) {
        printf("Stack overflow\n");
        exit(1);
    }
    stack[++top] = x;
}

// Function to pop an element from the stack
char pop() {
    if (top == -1) {
        printf("Stack underflow\n");
        exit(1);
    }
    return stack[top--];
}

// Function to return the precedence of an operator
int precedence(char x) {
    switch (x) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
    }
    return 0;
}

// Function to check if the character is an operator
int isOperator(char x) {
    return x == '+' || x == '-' || x == '*' || x == '/' || x == '^';
}

// Function to convert infix to postfix expression
void infixToPostfix(char *infix) {
    char postfix[MAX];
    int i, j = 0;
    
    for (i = 0; i < strlen(infix); i++) {
        // If the current character is an operand, add it to the postfix expression
        if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        }
        // If '(' is encountered, push it to stack
        else if (infix[i] == '(') {
            push(infix[i]);
        }
        // If ')' is encountered, pop and output until '(' is found
        else if (infix[i] == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[j++] = pop();
            }
            pop();  // Pop the '(' from the stack
        }
        // If the current character is an operator
        else if (isOperator(infix[i])) {
            while (top != -1 && precedence(stack[top]) >= precedence(infix[i])) {
                postfix[j++] = pop();
            }
            push(infix[i]);
        }
    }
    
    // Pop all remaining operators in the stack
    while (top != -1) {
        postfix[j++] = pop();
    }
    
    postfix[j] = '\0';  // Null terminate the postfix expression

    printf("Postfix expression: %s\n", postfix);
}

int main() {
    char infix[MAX];

    printf("Enter infix expression: ");
    gets(infix);

    infixToPostfix(infix);

    return 0;
}
